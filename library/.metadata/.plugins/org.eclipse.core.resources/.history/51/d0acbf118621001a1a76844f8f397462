package com.tyss.librarymanagement.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.tyss.librarymanagement.dto.AddBook;
import com.tyss.librarymanagement.dto.BookRequest;
import com.tyss.librarymanagement.dto.Registration;
import com.tyss.librarymanagement.dto.Responce;
import com.tyss.librarymanagement.service.LibraryService;

@CrossOrigin(origins = "*", allowedHeaders = "*" , allowCredentials = "true")
@RestController
public class LibraryActionController {
	
	@Autowired
	private LibraryService service;
	
	@PostMapping(path = "/reg" ,
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public Responce regSave(@RequestBody Registration registration) {
		Responce res = new Responce();
		if(service.userSave(registration)) {
			res.setStatus("200");
			res.setMsg("Registration Success");
			res.setDes("data added successfully");
			
		}else {
			res.setStatus("404");
			res.setMsg("Error");
			res.setDes("data added not successfully");
			
		}
		return res;
	}
	
	@PostMapping(path ="/login", 
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public Responce loginUser(@RequestBody Registration reg) {
		String name = reg.getName();
		String pwd  = reg.getPwd();
		Responce res = new Responce();
		Registration reg1 = service.loginUser(name ,pwd);
		if (reg1 !=null) {
			res.setStatus("201"); 
			res.setMsg("login success");
			res.setDes("logged"); 
			res.setRegistration(reg1); 
			
		}else {
			res.setMsg("Invalid credential");
			
		}
		/*
		 * List<Registration> regis = service.userDeatils(); for (Registration regis2 :
		 * regis) { System.out.println("in for loop"); if(regis2.getPwd().equals(pwd)) {
		 * System.out.println("in if"); Registration reg1 = service.loginUser(name ,
		 * pwd); if (reg1 != null) { res.setStatus("201"); res.setMsg("login success");
		 * res.setDes("logged"); res.setRegistration(reg1); }else {
		 * res.setStatus("401"); res.setMsg("login failed");
		 * res.setDes("Invalid credentials");
		 * 
		 * }
		 * 
		 * }else { System.out.println("in else"); res.setMsg("Invalid Credential"); }
		 */
		
		return res;
	}
	
	
	@PostMapping(path="/addBook",consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public boolean addBook(@RequestBody AddBook book) {
		
		return service.bookSave(book);
	}
	
	@DeleteMapping(path = "/delete/{bid}",
			produces = MediaType.APPLICATION_JSON_VALUE)
	public boolean deleteBook(@PathVariable("bid") int bid) {
		
		return service.deleteBook(bid);
	}
	
	@GetMapping(path ="/getList",produces = MediaType.APPLICATION_JSON_VALUE)
	public List<AddBook> bookList() {
		List<AddBook> bList = service.bookList();
		return bList;
		
	}
	
	@PutMapping(path = "/update", 
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public boolean update(@RequestBody AddBook book) {
		
		return service.update(book);
	}
     
	@PutMapping(path = "/req", 
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public boolean request(@RequestParam("sno") int sno , @RequestParam("list") List<AddBook> list) {
		
		return service.request(sno, list);
	}
	
	@PostMapping(path ="/request",
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public boolean bookrequest(@RequestBody BookRequest request) {
		
		
		return service.bookRequest(request);
		
	}
	
	@GetMapping(path="/reqList",
			produces = MediaType.APPLICATION_JSON_VALUE)
	public List<BookRequest> bookRqList() {
		
		return service.reqList();
	}
	
	@PostMapping(path="/approve", consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public boolean approved(@RequestBody BookRequest req) {
		
		
		return service.approve(req);
	}
	
	@DeleteMapping(path="/reject/{id}",
			produces = MediaType.APPLICATION_JSON_VALUE)
	public boolean rejected(@PathVariable("id") int id) {
		
		return service.reject(id);
	}
	@GetMapping(path="/approvedList",
			produces = MediaType.APPLICATION_JSON_VALUE)
	public List<BookRequest> approveList(){
		
		return service.approvedList();
	}
	
}
